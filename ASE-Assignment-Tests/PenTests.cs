using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ASE_assignment;

namespace ASE_Assignment_Tests
{
    public class PenTests
    {
        /// <summary>
        /// Tests the Pen colour correctly changes with an expected parameter
        /// </summary>
        [Fact]
        public void Pen_ValidColour()
        {
            // Arrange
            Canvas testBitmap = new Canvas(100, 100);
            Pen pen = new Pen(Color.Black);
            PenController controller = new PenController(testBitmap);
            var expectedColour = Color.Red;

            // Act
            controller.PenColour(Color.Red);

            // Assert
            Assert.Equal(expectedColour, controller.CurrentPenColor);
        }
        /// <summary>
        /// Tests the Pen colour throws an exception when an incorrect value is entered
        /// </summary>
        [Fact]
        public void Pen_InvalidColour()
        {
            // Arrange
            Canvas testBitmap = new Canvas(100, 100);
            PenController controller = new PenController(testBitmap);
            CommandParser parse = new CommandParser();
            VariableManager variableManager = new VariableManager();
            CommandProcessor runCommand = new CommandProcessor(controller, testBitmap, variableManager);

            // Assert
            var parsedLine = parse.ParseLine("pen apple");

            // Act 
            Assert.Throws<ArgumentException>(() => runCommand.RunLines(parsedLine));

        }
        /// <summary>
        /// Checks an exception is correctly thrown when an invalid value is entered
        /// </summary>
        [Fact]
        public void Fill_ValidChange()
        {
            // Arrange
            Canvas testBitmap = new Canvas(100, 100);
            PenController controller = new PenController(testBitmap);
            CommandParser parse = new CommandParser();
            VariableManager variableManager = new VariableManager();
            CommandProcessor runCommand = new CommandProcessor(controller, testBitmap, variableManager);

            // Act
            var parsedLine = parse.ParseLine("fill yes");


            // Assert
            Assert.Throws<ArgumentException>(() => runCommand.RunLines(parsedLine));
        }
        /// <summary>
        /// Test that the pen updates location as expected by comparing the previous location to the new location
        /// </summary>
        [Fact]
        public void MovePen_Test()
        {
            // Arrange
            Canvas testBitmap = new Canvas(100, 100);
            var controller = new PenController(testBitmap);
            int x = 50;
            int y = 50;

            // Act
            controller.PositionPen(x, y);

            // Assert
            Assert.Equal(x, controller.currentX);
            Assert.Equal(y, controller.currentY);
        }
        /// <summary>
        /// Test that the pen draws a line from the old location to the new location by comparing the previous location to the new location
        /// </summary>
        [Fact]
        public void DrawTo_Test()
        {
            // Arrange
            Canvas testBitmap = new Canvas(100, 100);
            var controller = new PenController(testBitmap);
            int x = 50;
            int y = 50;

            // Act
            controller.PositionPen(x, y);

            // Assert 
            Assert.Equal(x, controller.currentX);
            Assert.Equal(x, controller.currentY);
        }
        /// <summary>
        /// Tests that the clear command throws an exception if invalid parameters are entered
        /// </summary>
        [Fact]
        public void ClearCommand_InvalidValue()
        {
            // Arrange
            Canvas testBitmap = new Canvas(100, 100);
            PenController controller = new PenController(testBitmap);
            CommandParser parse = new CommandParser();
            VariableManager variableManager = new VariableManager();
            CommandProcessor runCommand = new CommandProcessor(controller, testBitmap, variableManager);

            // Act
            var parsedLine = parse.ParseLine("clear 100");

            // Assert
            Assert.Throws<SyntaxException>(() => runCommand.RunLines(parsedLine));
        }

    }
}
